---
import {
  type InferEntrySchema,
  type Render,
  type RenderedContent,
  getCollection,
  getEntry,
} from 'astro:content';

import Filters from '@/components/Filters/Filters.astro';
import Heading from '@/components/Heading/Heading.astro';
import PolaroidGroup from '@/components/PolaroidGroup/PolaroidGroup.astro';
import BaseLayout from '@/layouts/BaseLayout.astro';

import getSearchParamAsArray from '@/lib/getSearchParamAsArray';

interface Character {
  slug: string;
  name: string;
  clan?: {
    symbol: {
      src: string;
      width: number;
      height: number;
      format: 'png' | 'jpg' | 'jpeg' | 'tiff' | 'webp' | 'gif' | 'svg' | 'avif';
    };
    name: string;
    id: string;
    spanish_name: string;
  };
  hide?: boolean;
}

const allCharacters = await getCollection('characters');

const characterWithClan = await Promise.all(allCharacters.map(async (character) => {
  const { data } = character;

  let clanRaw = null;

  if (data.clan) {
    const { id, collection } = data.clan;
    clanRaw = await getEntry(collection, id) ;
  }

  return {
    ...data,
    clan: clanRaw?.data,
  };
}));

// Some characters are hidden because they are not presented to the players yet
function getVisibleCharacters() {
  return characterWithClan.filter((character) => character.hide !== true);
}

function getSelectedClansFromURL() {
  return getSearchParamAsArray(Astro.url, 'clan');
}

function getFilteredCharacterNames({
  visibleCharacters,
  filterClans,
}: { visibleCharacters: Character[]; filterClans: string[] }) {
  let characterNames = visibleCharacters.map((character) => character.slug);
  
  if (filterClans.length > 0) {
    characterNames = visibleCharacters
    .filter(
      (character) =>
      character.clan?.id && filterClans.includes(character.clan?.id),
    )
    .map((character) => character.slug);
  }

  return characterNames;
}

const visibleCharacters = getVisibleCharacters();

const filterClans = getSelectedClansFromURL();

const filteredCharacterNames = getFilteredCharacterNames({
  visibleCharacters,
  filterClans,
});
---

<BaseLayout pageTitle='Personajes'>
  <Heading tagName="h1" size="h1">Personajes</Heading>

  <div class="characters">
    <div class="characters__grid">
      <PolaroidGroup names={filteredCharacterNames} size='md' />
    </div>
    <aside class="characters__filters">
      <Filters filterItems={filterClans}/>
    </aside>
  </div>
</BaseLayout>

<style>
  .characters {
    display: flex;
    flex-direction: column-reverse;
    gap: var(--bn-spacing-24);

    @media (min-width: 600px) {
      flex-direction: row;
      gap: var(--bn-spacing-64);
    }
  }
  .characters__grid {
    flex: var(--bn-content-flex);
  }

  .characters__filters {
    flex: var(--bn-aside-flex);
  }
</style>
