---
import { getClans } from '@domain/clans';
import { getEntityTypes } from '@domain/entityTypes';
import { getFactions } from '@domain/factions';

import ClanSymbol from '@/components/ClanSymbol/ClanSymbol.astro';
import FilterItem from '@/components/FilterItem/FilterItem.astro';
import FilterList from '@/components/FilterList/FilterList.astro';

import './styles.css';

const isFilterClansOpen =
  Astro.url.searchParams.get('clansFilterOpen') === 'true';

const isFilterEntityTypesOpen =
  Astro.url.searchParams.get('entityTypesFilterOpen') === 'true';

const isFilterFactionsOpen =
  Astro.url.searchParams.get('factionsFilterOpen') === 'true';

const { filterItems } = Astro.props;

const clans = await getClans();
const entityTypes = await getEntityTypes();
const factions = await getFactions();
---

<div>
  <FilterList isFilterOpen={isFilterClansOpen} collectionName="clans" filterByLabel="Clan">
    {clans.map((clan) => {
      const isChecked:boolean = filterItems.includes(clan.id);

      return (
        <FilterItem
          checked={isChecked}
          dataFilterValue={clan.id}
          dataFilterType="clan"
          id={clan.id}
          name={clan.data.name}
          value={clan.id}
        >
          <ClanSymbol 
            alt={`${clan.data.name_es} symbol`}
            size={24}
            symbol={clan.data.symbol}
          />
          {clan.data.name_es}
        </FilterItem>
      )
    })}
  </FilterList>
  
    <FilterList isFilterOpen={isFilterEntityTypesOpen} collectionName="entityTypes" filterByLabel="entidad">
      {entityTypes.map((entityType) => {
        const isChecked:boolean = filterItems.includes(entityType.id);

        return (
          <FilterItem
            checked={isChecked}
            dataFilterValue={entityType.id}
            dataFilterType="entityType"
            id={entityType.id}
            name={entityType.data.name}
            value={entityType.id}
          >
            {entityType.data.name_es}
          </FilterItem>
        )
      })}
    </FilterList>

    <FilterList isFilterOpen={isFilterFactionsOpen} collectionName="factions" filterByLabel="Facción">
      {factions.map((faction) => {
        const isChecked:boolean = filterItems.includes(faction.id);

        return (
          <FilterItem
            checked={isChecked}
            dataFilterValue={faction.id}
            dataFilterType="faction"
            id={faction.id}
            name={faction.data.name}
            value={faction.id}
          >
            {faction.data.name_es}
          </FilterItem>
        )
      })}
    </FilterList>
</div>

<style>
 
</style> 

<!-- This script controls the open filters -->
<script>
  function setNewURLParamsToggleClans({ url, isFilterClansOpen }: { url: URL; isFilterClansOpen: boolean }) {
    if (isFilterClansOpen) {
      url.searchParams.set('clansFilterOpen', 'true');
    } else {
      url.searchParams.delete('clansFilterOpen');
    }

    return url;
  }

  function setNewURLParamsToggleEntityTypes({ url, isFilterEntityTypesOpen }: { url: URL; isFilterEntityTypesOpen: boolean }) {
    if (isFilterEntityTypesOpen) {
      url.searchParams.set('entityTypesFilterOpen', 'true');
    } else {
      url.searchParams.delete('entityTypesFilterOpen');
    }

    return url;
  }

  function setNewURLParamsToggleFactions({ url, isFilterFactionsOpen }: { url: URL; isFilterFactionsOpen: boolean }) {
    if (isFilterFactionsOpen) {
      url.searchParams.set('factionsFilterOpen', 'true');
    } else {
      url.searchParams.delete('factionsFilterOpen');
    }

    return url;
  }

  const filterClans = document.querySelector('#filter-clans');
  
  filterClans?.addEventListener('toggle', () => {
    const newUrl = setNewURLParamsToggleClans({
      url: new URL(window.location.href),
      isFilterClansOpen: filterClans.open
    });

    // Actualizar la URL sin recargar la página
    window.history.replaceState({}, '', newUrl);
  });

  const filterEntityType = document.querySelector('#filter-entity-type');
  
  filterEntityType?.addEventListener('toggle', () => {
    const newUrl = setNewURLParamsToggleEntityTypes({
      url: new URL(window.location.href),
      isFilterEntityTypesOpen: filterEntityType.open
    });

    // Actualizar la URL sin recargar la página
    window.history.replaceState({}, '', newUrl);
  });

  const filterFactions = document.querySelector('#filter-faction');

  filterFactions?.addEventListener('toggle', () => {
    const newUrl = setNewURLParamsToggleFactions({
      url: new URL(window.location.href),
      isFilterFactionsOpen: filterFactions.open
    });

    // Actualizar la URL sin recargar la página
    window.history.replaceState({}, '', newUrl);
  });
</script>

<script>
  import getSearchParamAsArray from "@/lib/getSearchParamAsArray";
  import setNewURLParams from "@/lib/setNewURLParams";

  // Seleccionar todos los filtros de tipo clan
  const filtersClans = document.querySelectorAll('[data-filter-type="clan"]');

  // Agregar el event listener a cada filtro de tipo clan
  filtersClans.forEach(filter => {
    filter.addEventListener('change', (event) => {
      const isChecked = (event.target as HTMLInputElement).checked;
      const filterValue = (event.target as HTMLInputElement).dataset.filterValue;

      if (!filterValue) return;

      const existingParams = getSearchParamAsArray(new URL(window.location.href), 'clan');

      let newParams = existingParams;

      if (isChecked) {
        newParams = [...existingParams, filterValue];
      } else {
        newParams = existingParams.filter((param) => param !== filterValue);
      }

      const newUrl = setNewURLParams({
        key: 'clan',
        url: new URL(window.location.href),
        valueArray: newParams as string[],
      });

      window.location.assign(newUrl.toString());
    });
  });

  // Seleccionar todos los filtros de tipo entidad
  const filtersEntityTypes = document.querySelectorAll('[data-filter-type="entityType"]');

  // Agregar el event listener a cada filtro de tipo entidad
  filtersEntityTypes.forEach(filter => {
    filter.addEventListener('change', (event) => {
      const isChecked = (event.target as HTMLInputElement).checked;
      const filterValue = (event.target as HTMLInputElement).dataset.filterValue;

      if (!filterValue) return;

      const existingParams = getSearchParamAsArray(new URL(window.location.href), 'entityType');

      let newParams = existingParams;

      if (isChecked) {
        newParams = [...existingParams, filterValue];
      } else {
        newParams = existingParams.filter((param) => param !== filterValue);
      }

      const newUrl = setNewURLParams({
        key: 'entityType',
        url: new URL(window.location.href),
        valueArray: newParams as string[],
      });

      window.location.assign(newUrl.toString());
    });
  });

  // Seleccionar todos los filtros de tipo facción
  const filtersFactions = document.querySelectorAll('[data-filter-type="faction"]');

  // Agregar el event listener a cada filtro de tipo facción
  filtersFactions.forEach(filter => {
    filter.addEventListener('change', (event) => {
      const isChecked = (event.target as HTMLInputElement).checked;
      const filterValue = (event.target as HTMLInputElement).dataset.filterValue;

      if (!filterValue) return;

      const existingParams = getSearchParamAsArray(new URL(window.location.href), 'faction');

      let newParams = existingParams;

      if (isChecked) {
        newParams = [...existingParams, filterValue];
      } else {
        newParams = existingParams.filter((param) => param !== filterValue);
      }

      const newUrl = setNewURLParams({
        key: 'faction',
        url: new URL(window.location.href),
        valueArray: newParams as string[],
      });

      window.location.assign(newUrl.toString());
    });
  });
</script>
