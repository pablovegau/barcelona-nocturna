---
import { getClans } from '@domain/clans'
import ClanSymbol from '@/components/ClanSymbol/ClanSymbol.astro';
import FilterList from '@/components/FilterList/FilterList.astro';
import FilterItem from '@/components/FilterItem/FilterItem.astro';

const isFilterClansOpen =
  Astro.url.searchParams.get('clansFilterOpen') === 'true';

const { filterItems } = Astro.props;

const clans = await getClans();
---

<div>
  <details class="filters" open={isFilterClansOpen}>
    <summary>Filtrar por Clan</summary>
    <FilterList>
      {clans.map((clan) => {
        const isChecked:boolean = filterItems.includes(clan.id);

        return (
          <FilterItem
            checked={isChecked}
            dataFilter={clan.id}
            id={clan.id}
            name={clan.data.name}
            value={clan.id}
          >
            <ClanSymbol 
              alt={`${clan.data.name_es} symbol`}
              size={24}
              symbol={clan.data.symbol}
            />
            {clan.data.name_es}
          </FilterItem>
        )
      })}
    </FilterList>
  </details>
</div>

<style>
  .filters {
    margin-block-start: var(--bn-spacing-28);
  }

  details > summary {
    display: flex;
    align-items: center;
    font-size: var(--bn-text-font-large);
    font-weight: bold;
    width: fit-content;
  }

  details[open] > summary {
    margin-bottom: var(--bn-spacing-16);
  }

  details > summary::before {
    content: '';
    width: 28px;
    aspect-ratio: 1;
    background-image: url('/src/assets/success.svg');
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
    margin-right: var(--bn-spacing-8);
    transform: rotate(-90deg);
    transition: transform 0.1s ease-in-out;

    /* Change color to white */
    filter: brightness(0) invert(1);
  }

  html[data-theme="light"] details > summary::before {
    filter: none;
  }
  
  details[open] > summary::before {
    transform: rotate(0);
  }

  details > summary:hover {
    cursor: pointer;
  }
</style> 

<script>
  function setNewURLParamsToggle({ url, isFilterClansOpen }: { url: URL; isFilterClansOpen: boolean }) {
    if (isFilterClansOpen) {
      url.searchParams.set('clansFilterOpen', 'true');
    } else {
      url.searchParams.delete('clansFilterOpen');
    }

    return url;
  }

  const details = document.querySelector('details');

  if (details) {
    details.addEventListener('toggle', () => {
      const newUrl = setNewURLParamsToggle({
        url: new URL(window.location.href),
        isFilterClansOpen: details.open
      });

      // Actualizar la URL sin recargar la p√°gina
      window.history.replaceState({}, '', newUrl);
    });
  }
</script>

<script>
  import getSearchParamAsArray from "@/lib/getSearchParamAsArray";
  import setNewURLParams from "@/lib/setNewURLParams";

  // Seleccionar todos los filtros
  const filters = document.querySelectorAll('[data-filter]');

  // Agregar el event listener a cada filtro
  filters.forEach(filter => {
    filter.addEventListener('change', (event) => {
      const isChecked = (event.target as HTMLInputElement).checked;
      const filterValue = (event.target as HTMLInputElement).dataset.filter;

      if (!filterValue) return;

      const existingParams = getSearchParamAsArray(new URL(window.location.href), 'clan');

      let newParams = existingParams;

      if (isChecked) {
        newParams = [...existingParams, filterValue];
      } else {
        newParams = existingParams.filter((param) => param !== filterValue);
      }

      const newUrl = setNewURLParams({
        key: 'clan',
        url: new URL(window.location.href),
        valueArray: newParams as string[],
      });

      window.location.assign(newUrl.toString());
    });
  });
</script>
